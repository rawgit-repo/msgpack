                    function renderGameObjects(layer, xOffset, yOffset) {
                        let tmpSprite;
                        let tmpX;
                        let tmpY;
                        gameObjects.forEach((tmp) => {
                            tmpObj = tmp;
                            if (tmpObj.alive) {
                                tmpX = tmpObj.x + tmpObj.xWiggle - xOffset;
                                tmpY = tmpObj.y + tmpObj.yWiggle - yOffset;
                                if (layer == 0) {
                                    tmpObj.update(delta);
                                }
                                if (DarkToggle) {
                                    function getOffSet(r, s) {
                                        let R = {x: maxScreenWidth/2, y: maxScreenHeight/2};
                                        let Object = {x: r, y: s};
                                        return {
                                            x: (Math.sqrt((s-R.y)*(s-R.y) + (r-R.x)*(r-R.x))/16.9) * Math.cos(Math.atan2(s-R.y, r-R.x)),
                                            y: (Math.sqrt((s-R.y)*(s-R.y) + (r-R.x)*(r-R.x))/16.9) * Math.sin(Math.atan2(s-R.y, r-R.x))
                                        };

                                    }
                                    let o = getOffSet(tmpX, tmpY);
                                    if (tmpObj && o) {
                                        mainContext.shadowBlur = 25;
                                        mainContext.shadowColor = "rgba(0, 0, 0, 1)";
                                        mainContext.shadowOffsetX = o.x;
                                        mainContext.shadowOffsetY = o.y;
                                    }
                                }

                                mainContext.globalAlpha = tmpObj.alpha;
                                if (tmpObj.layer == layer && isOnScreen(tmpX, tmpY, tmpObj.scale + (tmpObj.blocker || 0))) {
                                    if (tmpObj.isItem) {
                                        if ((tmpObj.dmg || tmpObj.trap) && !tmpObj.isTeamObject(player)) {
                                            tmpSprite = getObjSprite(tmpObj);
                                        } else {
                                            tmpSprite = getItemSprite(tmpObj);
                                        }

                                        mainContext.save();
                                        mainContext.translate(tmpX, tmpY);
                                        mainContext.rotate(tmpObj.dir);
                                        if (!tmpObj.active) {
                                            mainContext.scale(tmpObj.visScale / tmpObj.scale, tmpObj.visScale / tmpObj.scale);
                                        }
                                        mainContext.drawImage(tmpSprite, -(tmpSprite.width / 2), -(tmpSprite.height / 2));

                                        if(tmpObj.blocker){
                                            mainContext.strokeStyle = "#db6e6e";
                                            mainContext.globalAlpha = 0.3;
                                            mainContext.lineWidth = 6;
                                            renderCircle(0, 0, tmpObj.blocker, mainContext, false, true);
                                        }
                                        mainContext.restore();
                                    } else {
                                        if(tmpObj.type == 4){
                                            renderVolcanoAnim();
                                        } else {
                                            if (!traps.inTrap && (near.dist2 >= 300 || !enemy.length) && !instaC.isTrue && secPacket <= 80 && checkbox.checked) renderCactus(tmpObj);
                                            if (!RealPush) {
                                                if (getEl("autopush").checked && enemy.length && !traps.inTrap && !instaC.isTrue && !my.SpikeAim && near.dist2 <= 600 && config.isSandbox) {
                                                    pushCactus(tmpObj);
                                                } else {
                                                    if (my.autoPush) {
                                                        my.autoPush = false;
                                                        packet(A, lastMoveDir || undefined, 1);
                                                    }
                                                }
                                            }
                                            renderResources(tmpObj, tmpX, tmpY);
                                            tmpSprite = getResSprite(tmpObj);
                                            mainContext.drawImage(tmpSprite, tmpX - (tmpSprite.width / 2), tmpY - (tmpSprite.height / 2));
                                        }
                                    }
                                }
                                if (layer == 3) {
                                    if (tmpObj.active && tmpObj.health > 0 && tmpObj.group != undefined && getDist(tmpObj, player) <= 500) {
                                        if (tmpObj.health < tmpObj.maxHealth) {
                                            if (getEl("buildhp").checked) {

                                                var Size = 16;
                                                mainContext.font = `${Size}px Hammersmith One`;
                                                function Color() {
                                                    if (tmpObj.health >= tmpObj.maxHealth) {
                                                        return "light";
                                                    } else if (tmpObj.health < tmpObj.maxHealth && tmpObj.health > (tmpObj.maxHealth / 2)) {
                                                        return "rgba(255, 0, 0)";
                                                    } else {
                                                        return "rgba(255, 0, 0, 0.5)";
                                                    }
                                                }
                                                mainContext.fillStyle = Color();
                                                mainContext.strokeStyle = "black";

                                                function SimpleDetect() {
                                                    return tmpObj.health >= tmpObj.maxHealth && player.weapons[1] == 10;
                                                }
                                                var Che = tmpObj.isPlayer ? tmpObj : player;
                                                var WeaponDetect = Che.weapons[1] == 10 ? true : false;
                                                var Health = Math.max(1, Math.ceil(Math.ceil((tmpObj.health / (Che.weapons[1] == 10 ? 4 : 1))) / (items.weapons[(!WeaponDetect ? Che.weapons[0] : Che.weapons[1]) || Che.weapons[0]].dmg * 3.3)));
                                                var HealthTwo = 3;
                                                mainContext.strokeText(SimpleDetect() ? HealthTwo : Health, tmpObj.x - xOffset, tmpObj.y - yOffset);
                                                mainContext.fillText(SimpleDetect() && player.weapons[1] == 10 ? HealthTwo : Health, tmpObj.x - xOffset, tmpObj.y - yOffset);
                                            }
                                        }
                                    }
                                }
                            }
                        });

                        mainContext.restore();
                        if (layer == 0 && getEl("renderplace").checked) {
                            if (RenderPlace.length) {
                                RenderPlace.forEach((tmp) => {
                                    tmpX = tmp.x - xOffset;
                                    tmpY = tmp.y - yOffset;
                                    markObject(tmp, tmpX, tmpY);
                                });
                            }
                        }
                        if (DarkToggle && tmpObj) {
                            const be = mainContext;
                            be.shadowOffsetX = 0;
                            be.shadowOffsetY = 0;
                            be.shadowColor = null;
                            be.shadowBlur = 0;
                        }
                    }
